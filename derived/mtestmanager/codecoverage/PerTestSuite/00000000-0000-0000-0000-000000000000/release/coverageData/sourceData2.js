var sourceData2 = {"FileName":"C:\\Users\\wyu\\git\\CICD-200\\gitlab\\samd-with-matlab-test-new\\Algorithms\\ecgAnalysis.m","RawFileContents":["function results = ecgAnalysis(patient)\r","\r","results = struct( ...\r","    patientId     = 0, ...\r","    label         = \"\", ...\r","    score         = 0, ...\r","    heartRate     = -1, ...\r","    breathRate    = -1, ...\r","    heartRateSig  = [], ...\r","    breathRateSig = []);\r","\r","assert(isa(patient,\"struct\") && checkPatientStruct(patient), ...\r","    \"ecgAnalysis:InvalidPatient\", \"Input must be a patient object\");\r","results.patientId = patient.id;\r","\r","signal = patient.data.signal;\r","freq = patient.data.freq;\r","[lbl, scr, h_rate, b_rate, hr_sig, br_sig] = ecgClassify(signal, freq);\r","\r","% Breath rate validation\r","if ~(b_rate > 8 && b_rate < 25)\r","    b_rate = -1;\r","end\r","\r","% Heart rate validation\r","if ~(h_rate > 50 && h_rate < 200)\r","    h_rate = -1;\r","end\r","\r","% Save results of ECG analysis\r","results.label         = string(lbl);\r","results.score         = double(scr);\r","results.heartRate     = h_rate;\r","results.breathRate    = b_rate;\r","results.heartRateSig  = hr_sig;\r","results.breathRateSig = br_sig;\r","\r","end\r","\r","function out = checkPatientStruct(patient)\r","out = true;\r","keys = [\"first\", \"last\", \"age\", \"id\", \"data\", \"processed\"];\r","for i = 1:numel(keys)\r","    if ~isfield(patient, keys(i))\r","        out = false;\r","    end\r","end\r","end\r",""],"CoverageDisplayDataPerLine":{"Function":[{"LineNumber":1,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":39,"ContinuedLine":false},{"LineNumber":40,"Hits":2,"StartColumnNumbers":0,"EndColumnNumbers":42,"ContinuedLine":false}],"Statement":[{"LineNumber":3,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":4,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":21,"ContinuedLine":true},{"LineNumber":5,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":22,"ContinuedLine":true},{"LineNumber":6,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":21,"ContinuedLine":true},{"LineNumber":7,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":22,"ContinuedLine":true},{"LineNumber":8,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":22,"ContinuedLine":true},{"LineNumber":9,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":22,"ContinuedLine":true},{"LineNumber":10,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":24,"ContinuedLine":true},{"LineNumber":12,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":59,"ContinuedLine":false},{"LineNumber":13,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":68,"ContinuedLine":true},{"LineNumber":14,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":16,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":29,"ContinuedLine":false},{"LineNumber":17,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":25,"ContinuedLine":false},{"LineNumber":18,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":71,"ContinuedLine":false},{"LineNumber":21,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":22,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":16,"ContinuedLine":false},{"LineNumber":26,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":27,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":16,"ContinuedLine":false},{"LineNumber":31,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":32,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":33,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":34,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":35,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":36,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":41,"Hits":2,"StartColumnNumbers":0,"EndColumnNumbers":11,"ContinuedLine":false},{"LineNumber":42,"Hits":2,"StartColumnNumbers":0,"EndColumnNumbers":59,"ContinuedLine":false},{"LineNumber":43,"Hits":2,"StartColumnNumbers":0,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":44,"Hits":12,"StartColumnNumbers":4,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":45,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":20,"ContinuedLine":false}],"Decision":[{"LineNumber":21,"TrueHits":0,"FalseHits":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":26,"TrueHits":0,"FalseHits":0,"StartColumnNumbers":0,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":43,"TrueHits":12,"FalseHits":2,"StartColumnNumbers":0,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":44,"TrueHits":6,"FalseHits":6,"StartColumnNumbers":4,"EndColumnNumbers":33,"ContinuedLine":false}],"Condition":[{"LineNumber":21,"TrueHits":[0,0],"FalseHits":[0,0],"StartColumnNumbers":[5,19],"EndColumnNumbers":[15,30],"ContinuedLine":false},{"LineNumber":26,"TrueHits":[0,0],"FalseHits":[0,0],"StartColumnNumbers":[5,20],"EndColumnNumbers":[16,32],"ContinuedLine":false}],"MCDC":[{"LineNumber":21,"ExecutableTestPairs":2,"ExecutedTestPairs":0,"StartColumnNumbers":0,"EndColumnNumbers":31,"ConditionMCDCCov":[{"LineNumber":21,"StartColNumber":6,"EndColNumber":15,"TrueTestPair":"(TT)","TrueTestPairCovered":false,"FalseTestPair":"(Fx)","FalseTestPairCovered":false},{"LineNumber":21,"StartColNumber":20,"EndColNumber":30,"TrueTestPair":"(TT)","TrueTestPairCovered":false,"FalseTestPair":"(TF)","FalseTestPairCovered":false}],"ContinuedLine":false},{"LineNumber":26,"ExecutableTestPairs":2,"ExecutedTestPairs":0,"StartColumnNumbers":0,"EndColumnNumbers":33,"ConditionMCDCCov":[{"LineNumber":26,"StartColNumber":6,"EndColNumber":16,"TrueTestPair":"(TT)","TrueTestPairCovered":false,"FalseTestPair":"(Fx)","FalseTestPairCovered":false},{"LineNumber":26,"StartColNumber":21,"EndColNumber":32,"TrueTestPair":"(TT)","TrueTestPairCovered":false,"FalseTestPair":"(TF)","FalseTestPairCovered":false}],"ContinuedLine":false}]}}