function p = patient(first, last, age, id, signal, freq)

% Initialize default patient data structure
p = struct( ...
    first     = "", ...
    last      = "", ...
    age       = 0, ...
    id        = 0, ...
    processed = false);

% Setup assertions
firstCond = ischar(first) || isstring(first);
lastCond = ischar(last) || isstring(last);
nameCond = firstCond && lastCond;

% Check if input arguments are valid
assert(nameCond, ...
    "patient:InvalidName", "Invalid patient's name found");
assert(isalpha(first) && isalpha(last), ...
    "patient:InvalidName", "Invalid patient's name found");
assert(isnumeric(age) && age >= 0 && age <= 150, ...
    "patient:InvalidAge", "Patient's age must be between 0 and 150");
assert(isnumeric(id) && mod(id,1) == 0 && id > 0, ...
    "patient:InvalidId", "Patient's ID must be an integer greater than 0");
assert(isscalar(freq) && isnumeric(freq) && freq > 0 && mod(freq, 1) == 0, ...
    "patient:InvalidFreq", "Signal frequency must be a positive integer");
assert(isnumeric(signal) && length(signal) > 1, ...
    "patient:InvalidSignal", "Signal array must be numeric");
assert(numel(signal)/freq >= 30, ...
    "patient:InvalidSignal", "Signal must be 30 seconds or longer");

% Store valid patient info
p.first = first;
p.last  = last;
p.age   = age;
p.id    = id;
p.data  = struct( ...
    time   = (0:numel(signal)-1)/freq, ...
    signal = signal, ...
    freq   = freq);
end